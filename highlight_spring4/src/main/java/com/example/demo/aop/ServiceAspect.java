package com.example.demo.aop;import com.example.demo.annotation.Action;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;import org.aspectj.lang.reflect.MethodSignature;import org.springframework.stereotype.Component;import java.lang.reflect.Method;import java.util.Arrays;@Component@Aspectpublic class ServiceAspect {    @Pointcut("execution(* com.example.demo.service.FunctionService.sayHello(..))")    public void logAspect() {    }    @Around("logAspect()")    public Object doOperation(ProceedingJoinPoint joinPoint) throws Throwable {        System.out.println("进入切面");        Object[] objects = joinPoint.getArgs();        System.out.println("values" + Arrays.toString(objects));        System.out.println("调用方法前");        Object o = joinPoint.proceed();        System.out.println("调用方法后");        return o;    }    @Pointcut("@annotation(com.example.demo.annotation.Action)")    public void annotationPointCut() {    }    @After("annotationPointCut()")    public void afterOption(JoinPoint joinPoint) {        MethodSignature signature = (MethodSignature) joinPoint.getSignature();        Method method = signature.getMethod();        Action action = method.getAnnotation(Action.class);        System.out.println("注解式拦截" + action.name());    }    @Pointcut("execution(* com.example.demo.service.DemoMethodService.add(..))")    public void beforeOpration() {    }    @Before("beforeOpration()")    public void beforeMethod(JoinPoint joinPoint) {        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();        Method method = methodSignature.getMethod();        System.out.println("方法规则式拦截" + method.getName());    }}